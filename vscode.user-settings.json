{
    // 保存时设置文件的格式。格式化程序必须可用，不能自动保存文件，并且不能关闭编辑器。
    "editor.formatOnSave": true,
    // 控制字体系列。
    "editor.fontFamily": "Consolas, 'Courier New', monospace",
    // 渲染行高
    "editor.renderLineHighlight": "none",
    // 控制字体粗细。
    "editor.fontWeight": "normal",
    // 以像素为单位控制字号。
    "editor.fontSize": 12,
    // 控制行高。使用 0 通过字号计算行高。
    "editor.lineHeight": 24,
    // 控制行号的显示。可能的值为“开”、“关”和“相对”。“相对”将显示从当前光标位置开始计数的行数。
    "editor.lineNumbers": "on",
    // 显示垂直标尺的列
    "editor.rulers": [
        80,
        120
    ],
    // 执行文字相关的导航或操作时将用作文字分隔符的字符
    "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?_，。——”“‘’·》《、￥……",
    // 一个制表符等于的空格数。该设置在 `editor.detectIndentation` 启用时根据文件内容进行重写。
    "editor.tabSize": 2,
    // 按 "Tab" 时插入空格。该设置在 `editor.detectIndentation` 启用时根据文件内容进行重写。
    "editor.insertSpaces": true,
    // 当打开文件时，将基于文件内容检测 "editor.tabSize" 和 "editor.insertSpaces"。
    "editor.detectIndentation": true,
    // 控制选取范围是否有圆角
    "editor.roundedSelection": true,
    // 控制编辑器是否可以滚动到最后一行之后
    "editor.scrollBeyondLastLine": true,
    // 控制在多少个字符后编辑器会自动换到下一行。将其设置为 0 则将打开视区宽度换行(自动换行)。将其设置为 -1 则将强制编辑器始终不换行。
    "editor.wrappingColumn": -1,
    // 控制是否应换行。换行依据为 min(editor.wrappingColumn, viewportWidthInColumns)。
    "editor.wordWrap": false,
    // 控制换行的行的缩进。可以是"none"、 "same" 或 "indent"。
    "editor.wrappingIndent": "same",
    // 要对鼠标滚轮滚动事件的 "deltaX" 和 "deltaY" 使用的乘数
    "editor.mouseWheelScrollSensitivity": 1,
    // 控制键入时是否应显示快速建议
    "editor.quickSuggestions": true,
    // 控制延迟多少毫秒后将显示快速建议
    "editor.quickSuggestionsDelay": 100,
    // 启用参数提示
    "editor.parameterHints": true,
    // 控制编辑器是否应该在左括号后自动插入右括号
    "editor.autoClosingBrackets": true,
    // 控制编辑器是否应在键入后自动设置行的格式
    "editor.formatOnType": false,
    // 控制编辑器是否应自动设置粘贴内容的格式
    "editor.formatOnPaste": false,
    // 控制键入触发器字符时是否应自动显示建议
    "editor.suggestOnTriggerCharacters": true,
    // 控制除了 "Tab" 键以外，是否还应接受建议的 "Enter" 键。帮助避免“插入新行”或“接受建议”之间出现歧义。
    "editor.acceptSuggestionOnEnter": true,
    // 控制是否应接受建议的提交字符。例如，在 JavaScript 中，分号(";")可以为提交字符，可接受建议并键入该字符。
    "editor.acceptSuggestionOnCommitCharacter": true,
    // 控制是否将代码段与其他建议一起显示以及它们的排序方式。
    "editor.snippetSuggestions": "bottom",
    // 控制没有选择内容的复制是否复制当前行。
    "editor.emptySelectionClipboard": false,
    // 启用基于字的建议。
    "editor.wordBasedSuggestions": true,
    // 建议小组件的字号
    "editor.suggestFontSize": 0,
    // 建议小组件的行高
    "editor.suggestLineHeight": 0,
    // 当其前缀匹配时插入代码段。当 "quickSuggestions" 未启用时，效果最佳。
    "editor.tabCompletion": false,
    // 控制编辑器是否应突出显示选项的近似匹配
    "editor.selectionHighlight": true,
    // 控制可在概述标尺同一位置显示的效果数量
    "editor.overviewRulerLanes": 3,
    // 控制光标动画样式，可能的值为 "blink"、"smooth"、"phase"、"expand" 和 "solid"
    "editor.cursorBlinking": "blink",
    // 通过使用鼠标滚轮同时按住 Ctrl 可缩放编辑器的字体
    "editor.mouseWheelZoom": false,
    // 控制光标样式，接受的值为 "block"、"line" 和 "underline"
    "editor.cursorStyle": "line",
    // 启用字体连字
    "editor.fontLigatures": false,
    // 控制光标是否应隐藏在概述标尺中。
    "editor.hideCursorInOverviewRuler": false,
    // 控制编辑器中呈现空白字符的方式，可能为“无”、“边界”和“全部”。“边界”选项不会在单词之间呈现单空格。
    "editor.renderWhitespace": "none",
    // 控制编辑器是否应呈现控制字符
    "editor.renderControlCharacters": false,
    // 控制编辑器是否应呈现缩进参考线
    "editor.renderIndentGuides": true,
    // 控制编辑器应如何呈现当前行突出显示，可能为“无”、“装订线”、“线”和“全部”。
    "editor.renderLineHighlight": "gutter",
    // 控制编辑器是否显示代码滤镜
    "editor.codeLens": true,
    // 控制编辑器是否启用代码折叠功能
    "editor.folding": true,
    // 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。
    "editor.glyphMargin": true,
    // 在制表位后插入和删除空格
    "editor.useTabStops": true,
    // 删除尾随自动插入的空格
    "editor.trimAutoWhitespace": true,
    // 即使在双击编辑器内容或按 Esc 键时，也要保持速览编辑器的打开状态。
    "editor.stablePeek": false,
    // 控制 Diff 编辑器以并排或内联形式显示差异
    "diffEditor.renderSideBySide": true,
    // 控制差异编辑器是否将对前导空格或尾随空格的更改显示为差异
    "diffEditor.ignoreTrimWhitespace": true,
    // 控制差异编辑器是否为已添加/删除的更改显示 +/- 指示符号
    "diffEditor.renderIndicators": true,
    // 启用后，按 TAB 键时，将展开 Emmet 缩写。
    "emmet.triggerExpansionOnTab": true,
    // 用于修改 Emmet 的某些操作和解决程序的首选项。
    "emmet.preferences": {},
    // 为指定的语法定义配置文件或使用带有特定规则的配置文件。
    "emmet.syntaxProfiles": {},
    // emmet 缩写不应在其中展开的语言数组。
    "emmet.excludeLanguages": [
        "markdown"
    ],
    // 转至包含 Emmet 配置文件、片段和首选项的文件的路径
    "emmet.extensionsPath": null,
    // 控制打开的编辑器是否显示在选项卡中。
    "workbench.editor.showTabs": true,
    // 设置选项卡中的关闭按钮的位置
    "workbench.editor.tabCloseButton": "right",
    // 控制打开的编辑器是否随图标一起显示。这还需启用图标主题。
    "workbench.editor.showIcons": true,
    // 控制打开的编辑器是否显示为预览。预览编辑器可以重新使用，直到将其保留(例如，双击或编辑)。
    "workbench.editor.enablePreview": true,
    // 控制 Quick Open 中打开的编辑器是否显示为预览。预览编辑器可以重新使用，直到将其保留(例如，通过双击或编辑)。
    "workbench.editor.enablePreviewFromQuickOpen": true,
    // 控制打开编辑器的位置。选择“左侧”或“右侧”以在当前活动位置的左侧或右侧打开编辑器。选择“第一个”或“最后一个”以从当前活动位置独立打开编辑器。
    "workbench.editor.openPositioning": "right",
    // 控制 Quick Open 是否应在失去焦点时自动关闭。
    "workbench.quickOpen.closeOnFocusLost": true,
    // 控制打开设置时是否打开显示所有默认设置的编辑器。
    "workbench.settings.openDefaultSettings": true,
    // 控制边栏的位置。它可显示在工作台的左侧或右侧。
    "workbench.sideBar.location": "left",
    // 控制工作台底部状态栏的可见性。
    "workbench.statusBar.visible": true,
    // 控制工作台中活动栏的可见性。
    "workbench.activityBar.visible": true,
    // When enabled, will show the Welcome experience on startup.
    "workbench.welcome.enabled": false,
    // 启用后，将在新窗口中打开文件，而不是重复使用现有实例。
    "window.openFilesInNewWindow": "on",
    // Controls if folders should open in a new window or replace the last active window.
    // - default: folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)
    // - on: folders will open in a new window
    // - off: folders will replace the last active window
    // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
    "window.openFoldersInNewWindow": "default",
    // 控制重启后重新打开文件夹的方式。选择“none”表示永不重新打开文件夹，选择“one”表示重新打开最后使用的一个文件夹，或选择“all”表示打开上次会话的所有文件夹。
    "window.reopenFolders": "one",
    // 如果窗口已退出全屏模式，控制其是否应还原为全屏模式。
    "window.restoreFullscreen": false,
    // 调整窗口的缩放级别。原始大小是 0，每次递增(例如 1)或递减(例如 -1)表示放大或缩小 20%。也可以输入小数以便以更精细的粒度调整缩放级别。
    "window.zoomLevel": 0,
    // 如果启用，将在窗口标题中显示打开文件的完整路径。
    "window.showFullPath": false,
    // 控制打开新窗口的尺寸。默认情况下，新窗口将以小尺寸在屏幕的中央打开。当设置为“继承”时，窗口将获取与上一活动窗口相同的尺寸。当设置为“最大化”时，窗口将以最大化形式打开，如果配置为“全屏”，窗口将以全屏形式打开。
    "window.newWindowDimensions": "inherit",
    // 控制菜单栏的可见性。“切换”设置表示每按一次 Alt 键将显示和隐藏此菜单栏。
    "window.menuBarVisibility": "default",
    // 如果已启用，将自动更改为高对比度主题；如果 Windows 正在使用高对比度主题，则当离开 Windows 高对比度主题时会更改为深色主题。
    "window.autoDetectHighContrast": true,
    // 配置 glob 模式以排除文件和文件夹。
    "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/.DS_Store": true
    },
    // 配置语言的文件关联(如: "*.extension": "html")。这些关联的优先级高于已安装语言的默认关联。
    "files.associations": {},
    // 读取和编写文件时将使用的默认字符集编码。
    "files.encoding": "utf8",
    // 默认行尾字符。
    "files.eol": "\r\n",
    // 启用后，将在保存文件时剪裁尾随空格。
    "files.trimTrailingWhitespace": true,
    // 启用后，保存文件时在文件末尾插入一个最终新行。
    "files.insertFinalNewline": true,
    // 控制已更新文件的自动保存。接受的值:“off”、"afterDelay”、"onFocusChange”(编辑器失去焦点)、"onWindowChange”(窗口失去焦点)。如果设置为“afterDelay”，则可在 "files.autoSaveDelay" 中配置延迟。
    "files.autoSave": "afterDelay",
    // 控制延迟(以秒为单位)，在该延迟后将自动保存更新后的文件。仅在 "files.autoSave" 设置为“afterDelay”时适用。
    "files.autoSaveDelay": 60000,
    // 配置文件路径的 glob 模式以从文件监视排除。更改此设置要求重启。如果在启动时遇到 Code 消耗大量 CPU 时间，则可以排除大型文件夹以减少初始加载。
    "files.watcherExclude": {
        "**/.git/objects/**": true
    },
    // 控制是否在重启后还原未保存文件。如果启用它，退出编辑器时将不会提示保存。
    "files.hotExit": "onExit",
    // 控制打开 Zen Mode 是否也会将工作台置于全屏模式。
    "zenMode.fullScreen": true,
    // 控制打开 Zen 模式是否也会隐藏工作台选项卡。
    "zenMode.hideTabs": true,
    // 控制打开 Zen 模式是否也会隐藏工作台底部的状态栏。
    "zenMode.hideStatusBar": true,
    // 在“打开的编辑器”窗格中显示的编辑器数量。将其设置为 0 可隐藏窗格。
    "explorer.openEditors.visible": 9,
    // 控制打开的编辑器部分的高度是否应动态适应元素数量。
    "explorer.openEditors.dynamicHeight": true,
    // 控制资源管理器是否应在打开文件时自动显示并选择它们。
    "explorer.autoReveal": true,
    // 控制资源管理器是否应该允许通过拖放移动文件和文件夹。
    "explorer.enableDragAndDrop": true,
    // 配置 glob 模式以在搜索中排除文件和文件夹。从 files.exclude 设置中继承所有 glob 模式。
    "search.exclude": {
        "**/node_modules": true,
        "**/bower_components": true
    },
    // 配置为在 Quick Open 文件结果中包括全局符号搜索的结果。
    "search.quickOpen.includeSymbols": false,
    // 配置是否从更新通道接收自动更新。更改后需要重启。
    "update.channel": "default",
    // 是否启用了 GIT
    "git.enabled": true,
    // 可执行 GIT 的路径
    "git.path": "C:/Program Files (x86)/Git/bin/git.exe",
    // 是否已启用自动刷新
    "git.autorefresh": true,
    // 是否启用了自动提取。
    "git.autofetch": true,
    // 是否应警告提交长段消息。
    "git.enableLongCommitWarning": true,
    // 始终允许大型存储库由 Code 托管。
    "git.allowLargeRepositories": false,
    // 同步 Git 存储库前请先进行确认。
    "git.confirmSync": true,
    // 控制 git 徽章计数器。
    "git.countBadge": "all",
    // 控制列出哪些分支类型。
    "git.checkoutType": "all",
    // 要使用的代理设置。如果尚未设置，则将从 http_proxy 和 https_proxy 环境变量获取
    "http.proxy": "",
    // 是否应根据提供的 CA 列表验证代理服务器证书。
    "http.proxyStrictSSL": true,
    // 要作为每个网络请求的 "Proxy-Authorization" 标头发送的值。
    "http.proxyAuthorization": null,
    // Controls CSS validation and problem severities.
    // 启用或禁用所有验证
    "css.validate": true,
    // 使用供应商特定前缀时，确保同时包括所有其他供应商特定属性
    "css.lint.compatibleVendorPrefixes": "ignore",
    // 使用供应商特定前缀时，还应包括标准属性
    "css.lint.vendorPrefix": "warning",
    // 不要使用重复的样式定义
    "css.lint.duplicateProperties": "ignore",
    // 不要使用空规则集
    "css.lint.emptyRules": "warning",
    // Import 语句不会并行加载
    "css.lint.importStatement": "ignore",
    // 使用边距或边框时，不要使用宽度或高度
    "css.lint.boxModel": "ignore",
    // 已知通配选择符 (*) 慢
    "css.lint.universalSelector": "ignore",
    // 零不需要单位
    "css.lint.zeroUnits": "ignore",
    // @font-face 规则必须定义 "src" 和 "font-family" 属性
    "css.lint.fontFaceProperties": "warning",
    // 十六进制颜色必须由三个或六个十六进制数字组成
    "css.lint.hexColorLength": "error",
    // 参数数量无效
    "css.lint.argumentsInColorFunction": "error",
    // 未知的属性。
    "css.lint.unknownProperties": "warning",
    // 仅当支持 IE7 及更低版本时，才需要 IE hack
    "css.lint.ieHack": "ignore",
    // 未知的供应商特定属性。
    "css.lint.unknownVendorSpecificProperties": "ignore",
    // 因显示而忽略属性。例如，使用 "display: inline"时，宽度、高度、上边距、下边距和 float 属性将不起作用
    "css.lint.propertyIgnoredDueToDisplay": "warning",
    // 避免使用 !important。它表明整个 CSS 的特异性已经失去控制且需要重构。
    "css.lint.important": "ignore",
    // 避免使用“float”。浮动会带来脆弱的 CSS，如果布局的某一方面更改，将很容易破坏 CSS。
    "css.lint.float": "ignore",
    // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
    "css.lint.idSelector": "ignore",
    // Traces the communication between VS Code and the CSS language server.
    "css.trace.server": "off",
    // Controls SCSS validation and problem severities.
    // 启用或禁用所有验证
    "scss.validate": true,
    // 使用供应商特定前缀时，确保同时包括所有其他供应商特定属性
    "scss.lint.compatibleVendorPrefixes": "ignore",
    // 使用供应商特定前缀时，还应包括标准属性
    "scss.lint.vendorPrefix": "warning",
    // 不要使用重复的样式定义
    "scss.lint.duplicateProperties": "ignore",
    // 不要使用空规则集
    "scss.lint.emptyRules": "warning",
    // Import 语句不会并行加载
    "scss.lint.importStatement": "ignore",
    // 使用边距或边框时，不要使用宽度或高度
    "scss.lint.boxModel": "ignore",
    // 已知通配选择符 (*) 慢
    "scss.lint.universalSelector": "ignore",
    // 零不需要单位
    "scss.lint.zeroUnits": "ignore",
    // @font-face 规则必须定义 "src" 和 "font-family" 属性
    "scss.lint.fontFaceProperties": "warning",
    // 十六进制颜色必须由三个或六个十六进制数字组成
    "scss.lint.hexColorLength": "error",
    // 参数数量无效
    "scss.lint.argumentsInColorFunction": "error",
    // 未知的属性。
    "scss.lint.unknownProperties": "warning",
    // 仅当支持 IE7 及更低版本时，才需要 IE hack
    "scss.lint.ieHack": "ignore",
    // 未知的供应商特定属性。
    "scss.lint.unknownVendorSpecificProperties": "ignore",
    // 因显示而忽略属性。例如，使用 "display: inline"时，宽度、高度、上边距、下边距和 float 属性将不起作用
    "scss.lint.propertyIgnoredDueToDisplay": "warning",
    // 避免使用 !important。它表明整个 CSS 的特异性已经失去控制且需要重构。
    "scss.lint.important": "ignore",
    // 避免使用“float”。浮动会带来脆弱的 CSS，如果布局的某一方面更改，将很容易破坏 CSS。
    "scss.lint.float": "ignore",
    // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
    "scss.lint.idSelector": "ignore",
    // 允许在任何文件中设置断点
    "debug.allowBreakpointsEverywhere": false,
    // 调试会话结束时自动打开资源管理器视图
    "debug.openExplorerOnEnd": false,
    // 调试时，在编辑器中显示变量值内联
    "debug.inlineValues": false,
    // 启用/禁用默认 HTML 格式化程序(需要重启)
    "html.format.enable": true,
    // 每行最大字符数(0 = 禁用)。
    "html.format.wrapLineLength": 120,
    // 以逗号分隔的标记列表不应重设格式。"null" 默认为所有列于 https://www.w3.org/TR/html5/dom.html#phrasing-content 的标记。
    "html.format.unformatted": "a, abbr, acronym, b, bdo, big, br, button, cite, code, dfn, em, i, img, input, kbd, label, map, object, q, samp, select, small, span, strong, sub, sup, textarea, tt, var",
    // 以逗号分隔的标记列表，不应在其中重新设置内容的格式。"null" 默认为 "pre" 标记。
    "html.format.contentUnformatted": "pre",
    // 缩进 <head> 和 <body> 部分。
    "html.format.indentInnerHtml": true,
    // 是否要保留元素前面的现有换行符。仅适用于元素前，不适用于标记内或文本。
    "html.format.preserveNewLines": true,
    // 要保留在一个区块中的换行符的最大数量。对于无限制使用 "null"。
    "html.format.maxPreserveNewLines": null,
    // 格式和缩进 {{#foo}} 和 {{/foo}}。
    "html.format.indentHandlebars": false,
    // 以新行结束。
    "html.format.endWithNewline": false,
    // 标记列表，以逗号分隔，其前应有额外新行。"null" 默认为“标头、正文、/html”。
    "html.format.extraLiners": "head, body, /html",
    // 对属性进行换行。
    "html.format.wrapAttributes": "auto",
    // 配置内置 HTML 语言支持是否建议 Angular V1 标记和属性。
    "html.suggest.angular1": true,
    // 配置内置 HTML 语言支持是否建议 Ionic 标记、属性和值。
    "html.suggest.ionic": true,
    // 配置内置 HTML 语言支持是否建议 HTML5 标记、属性和值。
    "html.suggest.html5": true,
    // 配置内置的 HTML 语言支持是否对嵌入的脚本进行验证。
    "html.validate.scripts": true,
    // 配置内置的 HTML 语言支持是否对嵌入的样式进行验证。
    "html.validate.styles": true,
    // Traces the communication between VS Code and the HTML language server.
    "html.trace.server": "off",
    // 将当前项目中的 JSON 文件与架构关联起来
    "json.schemas": [],
    // 启用/禁用默认 JSON 格式化程序(需要重启)
    "json.format.enable": true,
    // Traces the communication between VS Code and the JSON language server.
    "json.trace.server": "off",
    // 要在 Markdown 预览中使用的 CSS 样式表的 URL 或本地路径列表。相对路径被解释为相对于资源管理器中打开的文件夹。如果没有任何打开的文件夹，则会被解释为相对于 Markdown 文件的位置。所有的 "" 需写为 "\"。
    "markdown.styles": [],
    // 设置如何在 Markdown 预览中呈现 YAML 扉页。“隐藏”会删除扉页。否则，扉页则被视为 Markdown 内容。
    "markdown.previewFrontMatter": "hide",
    // 控制 Markdown 预览中使用的字体系列。
    "markdown.preview.fontFamily": "'Segoe WPC', 'Segoe UI', 'SFUIText-Light', 'HelveticaNeue-Light', sans-serif",
    // 控制 Markdown 预览中使用的字号(以像素为单位)
    "markdown.preview.fontSize": 14,
    // 控制 Markdown 预览中使用的行高。此数值与字号相关。
    "markdown.preview.lineHeight": 1.6,
    // Scrolls the markdown preview to reveal the currently selected line from the editor.
    "markdown.preview.scrollPreviewWithEditorSelection": true,
    // Mark the current editor selection in the markdown preview.
    "markdown.preview.markEditorSelection": true,
    // When the markdown preview is scrolled, update the view of the editor.
    "markdown.preview.scrollEditorWithPreview": true,
    // Enable double clicking in the markdown preview switches to the editor.
    "markdown.preview.doubleClickToSwitchToEditor": true,
    // Configures if the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
    "php.suggest.basic": true,
    // 不管 php 验证是否已启用。
    "php.validate.enable": true,
    // 指向可执行的 php。
    "php.validate.executablePath": "C:/Programming/php7/php.exe",
    // 不管 linter 是在 save 还是在 type 上运行。
    "php.validate.run": "onSave",
    // 指定包含要使用的 tsserver 和 lib*.d.ts 文件的文件夹路径。
    "typescript.tsdk": "C:/Program Files/nodejs/node_modules/typescript/lib",
    // 禁用自动获取类型。需要 TypeScript >= 2.0.6，并且更改后需要重启。
    "typescript.disableAutomaticTypeAcquisition": false,
    // 检查全局安装的 TypeScript 编译器(例如 tsc )是否不同于使用的 TypeScript 语言服务。
    "typescript.check.tscVersion": true,
    // Enable/disable the references code lens
    "typescript.referencesCodeLens.enabled": false,
    // 对发送到 TS 服务器的消息启用跟踪。
    "typescript.tsserver.trace": "off",
    // 完成函数的参数签名。
    "typescript.useCodeSnippetsOnMethodSuggest": false,
    // 启用/禁用 TypeScript 验证。
    "typescript.validate.enable": true,
    // 启用/禁用默认 TypeScript 格式化程序。
    "typescript.format.enable": true,
    // 定义逗号分隔符后面的空格处理。
    "typescript.format.insertSpaceAfterCommaDelimiter": true,
    // 在 For 语句中，定义分号后面的空格处理。
    "typescript.format.insertSpaceAfterSemicolonInForStatements": true,
    // 定义二进制运算符后面的空格处理
    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
    // 定义控制流语句中的关键字后面的空格处理。
    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
    // 定义匿名函数的函数关键字后面的空格处理。
    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
    // 定义非空圆括号的左括号后面和右括号前面的空格处理。
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
    // 定义非空方括号的左括号后面和右括号前面的空格处理。
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
    // 定义模板字符串的左括号后面和右括号前面的空格处理。要求 TypeScript >= 2.0.6。
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
    // 定义 JSX 表达式左括号后面和右括号前面的空格处理。要求 TypeScript >= 2.0.6。
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
    // 定义函数的左大括号是否放置在新的一行。
    "typescript.format.placeOpenBraceOnNewLineForFunctions": false,
    // 定义控制块的左括号是否放置在新的一行。
    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
    // 启用/禁用 JavaScript 验证。
    "javascript.validate.enable": true,
    // 启用/禁用 JavaScript 格式化程序。
    "javascript.format.enable": true,
    // 定义逗号分隔符后面的空格处理。
    "javascript.format.insertSpaceAfterCommaDelimiter": true,
    // 在 For 语句中，定义分号后面的空格处理。
    "javascript.format.insertSpaceAfterSemicolonInForStatements": true,
    // 定义二进制运算符后面的空格处理
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
    // 定义控制流语句中的关键字后面的空格处理。
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
    // 定义匿名函数的函数关键字后面的空格处理。
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
    // 定义非空圆括号的左括号后面和右括号前面的空格处理。
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
    // 定义非空方括号的左括号后面和右括号前面的空格处理。
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
    // 定义模板字符串的左括号后面和右括号前面的空格处理。要求 TypeScript >= 2.0.6。
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
    // 定义 JSX 表达式左括号后面和右括号前面的空格处理。要求 TypeScript >= 2.0.6。
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
    // 定义函数的左大括号是否放置在新的一行。
    "javascript.format.placeOpenBraceOnNewLineForFunctions": false,
    // 定义控制块的左括号是否放置在新的一行。
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
    // 自动更新扩展
    "extensions.autoUpdate": true,
    // 终端在 Linux 上使用的 shell 的路径。
    "terminal.integrated.shell.linux": "sh",
    // 在 Linux 终端上时要使用的命令行参数。
    "terminal.integrated.shellArgs.linux": [],
    // 终端在 OS X 上使用的 shell 的路径。
    "terminal.integrated.shell.osx": "sh",
    // 在 OS X 终端上时要使用的命令行参数。
    "terminal.integrated.shellArgs.osx": [],
    // 终端在 Windows 上使用的 shell 的路径。使用随 Windows 一起提供的 shell 时(cmd、PowerShell 或 Ubuntu 上的 Bash)，相对 C:\Windows\System32，首选 C:\Windows\sysnative 以使用 64 位版本。
    "terminal.integrated.shell.windows": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe",
    // 在 Windows 终端上时使用的命令行参数。
    "terminal.integrated.shellArgs.windows": [],
    // 设置后，在终端内右键单击时，这将阻止显示上下文菜单，相反，它将在有选项时进行复制，并且在没有选项时进行粘贴。
    "terminal.integrated.rightClickCopyPaste": true,
    // 控制终端的字体系列，这在编辑器中是默认的。fontFamily 的值。
    "terminal.integrated.fontFamily": "",
    // 控制是否在终端中启用字体连字。
    "terminal.integrated.fontLigatures": false,
    // 控制终端的字号(以像素为单位)。
    "terminal.integrated.fontSize": 14,
    // 控制终端的行高，此数字乘以终端字号得到实际行高(以像素表示)。
    "terminal.integrated.lineHeight": 1.0,
    // 控制终端游标是否闪烁。
    "terminal.integrated.cursorBlinking": false,
    // 控制终端游标的样式。
    "terminal.integrated.cursorStyle": "underline",
    // 控制终端保持在缓冲区的最大行数。
    "terminal.integrated.scrollback": 1000,
    // Controls the whether the terminal emulator will use flow control in order to catch up with the shell process, the main effect of this is that ^C and other signals should be much more responsive when commands give lots of output. You should this disabled if you have custom ^S or ^Q keybindings that override the XOFF and XON signals used.
    "terminal.integrated.flowControl": true,
    // 控制是否在终端启动时设置区域设置变量，在 OS X 上默认设置为 true，在其他平台上为 false。
    "terminal.integrated.setLocaleVariables": false,
    // 将在其中启动终端的一个显式起始路径，它用作 shell 进程的当前工作目录(cwd)。当根目录为不方便的 cwd 时，此路径在工作区设置中可能十分有用。
    "terminal.integrated.cwd": "C:/Users/jferroal",
    // 一组命令 ID，其键绑定不发送到 shell 而始终由 Code 处理。这使得通常由 shell 使用的键绑定的使用效果与未将终端设为焦点时相同，例如按 Ctrl+P 启动 Quick Open。
    "terminal.integrated.commandsToSkipShell": [
        "editor.action.toggleTabFocusMode",
        "workbench.action.debug.continue",
        "workbench.action.debug.restart",
        "workbench.action.debug.run",
        "workbench.action.debug.start",
        "workbench.action.debug.stop",
        "workbench.action.openNextRecentlyUsedEditorInGroup",
        "workbench.action.openPreviousRecentlyUsedEditorInGroup",
        "workbench.action.quickOpen",
        "workbench.action.showCommands",
        "workbench.action.terminal.clear",
        "workbench.action.terminal.copySelection",
        "workbench.action.terminal.focus",
        "workbench.action.terminal.focusNext",
        "workbench.action.terminal.focusPrevious",
        "workbench.action.terminal.kill",
        "workbench.action.terminal.new",
        "workbench.action.terminal.paste",
        "workbench.action.terminal.runSelectedText",
        "workbench.action.terminal.scrollDown",
        "workbench.action.terminal.scrollDownPage",
        "workbench.action.terminal.scrollToBottom",
        "workbench.action.terminal.scrollToTop",
        "workbench.action.terminal.scrollUp",
        "workbench.action.terminal.scrollUpPage",
        "workbench.action.terminal.toggleTerminal"
    ],
    // 自定义要在 Windows 上运行的终端。
    "terminal.external.windowsExec": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe",
    // 自定义要在 OS X 上运行的终端应用程序。
    "terminal.external.osxExec": "Terminal.app",
    // 自定义要在 Linux 上运行的终端。
    "terminal.external.linuxExec": "xterm",
    // 控制问题预览是否应在打开文件时自动显示它们。
    "problems.autoReveal": true,
    // 启用要发送给 Microsoft 的故障报表。
    // 此选项需重启才可生效。
    "telemetry.enableCrashReporter": true,
    // 启用要发送给 Microsoft 的使用情况数据和错误。
    "telemetry.enableTelemetry": true,
    // If true, causes the 32-bit language service to be used on 64-bit Windows.  On 32-bit Windows this setting has no effect.  This setting does not affect the debugger which has its own architecture configuration.
    "powershell.useX86Host": false,
    // If true, causes user and system wide profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) to be loaded into the PowerShell session.  This affects IntelliSense and interactive script execution.  The debugger is not affected by this setting.
    "powershell.enableProfileLoading": true,
    // Enables real-time script analysis using PowerShell Script Analyzer.
    "powershell.scriptAnalysis.enable": true,
    // Specifies the path to a PowerShell Script Analyzer settings file. Use either an absolute path (to override the default settings for all projects) or use a path relative to your workspace.
    "powershell.scriptAnalysis.settingsPath": "",
    // Specifies the full path to a PowerShell executable.  Used to change the installation of PowerShell used for language and debugging services.
    "powershell.developer.powerShellExePath": "",
    // If true, indicates that the powerShellExePath points to a developer build of Windows PowerShell and should be configured appropriately.
    "powershell.developer.powerShellExeIsWindowsDevBuild": false,
    // Specifies the path to the folder containing modules that are bundled with the PowerShell extension (i.e. PowerShell Editor Services, PowerShell Script Analyzer, Plaster)
    "powershell.developer.bundledModulesPath": "../modules/",
    // Sets the logging verbosity level for the PowerShell Editor Services host executable.  Possible values are 'Verbose', 'Normal', 'Warning', and 'Error'
    "powershell.developer.editorServicesLogLevel": "Normal",
    // Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding.
    "powershell.developer.editorServicesWaitForDebugger": false,
    // Places open brace on the same line as its associated statement.
    "powershell.codeFormatting.openBraceOnSameLine": true,
    // A new line must follow an open brace.
    "powershell.codeFormatting.newLineAfterOpenBrace": true,
    // 为一组语言标识符配置要被替代的设置。
    "[]": {},
    // Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
    "python.pythonPath": "C:/Python27",
    // Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).
    "python.jediPath": "",
    // Path to isort script, default using inner version
    "python.sortImports.path": "",
    // Arguments passed in. Each argument is a separate item in the array.
    "python.sortImports.args": [],
    // Whether to lint Python files.
    "python.linting.enabled": true,
    // Whether to lint Python files using prospector.
    "python.linting.prospectorEnabled": false,
    // Whether to lint Python files using pylint.
    "python.linting.pylintEnabled": true,
    // Whether to lint Python files using pep8
    "python.linting.pep8Enabled": false,
    // Whether to lint Python files using flake8
    "python.linting.flake8Enabled": false,
    // Whether to lint Python files using pydocstyle
    "python.linting.pydocstyleEnabled": false,
    // Whether to lint Python files using mypy.
    "python.linting.mypyEnabled": false,
    // Whether to lint Python files when modified.
    "python.linting.lintOnTextChange": true,
    // Whether to lint Python files when saved.
    "python.linting.lintOnSave": true,
    // Controls the maximum number of problems produced by the server.
    "python.linting.maxNumberOfProblems": 100,
    // Severity of Pylint message type 'Convention/C'.
    "python.linting.pylintCategorySeverity.convention": "Information",
    // Severity of Pylint message type 'Refactor/R'.
    "python.linting.pylintCategorySeverity.refactor": "Hint",
    // Severity of Pylint message type 'Warning/W'.
    "python.linting.pylintCategorySeverity.warning": "Warning",
    // Severity of Pylint message type 'Error/E'.
    "python.linting.pylintCategorySeverity.error": "Error",
    // Severity of Pylint message type 'Fatal/F'.
    "python.linting.pylintCategorySeverity.fatal": "Error",
    // Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
    "python.linting.prospectorPath": "prospector",
    // Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
    "python.linting.pylintPath": "pylint",
    // Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.
    "python.linting.pep8Path": "pep8",
    // Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
    "python.linting.flake8Path": "flake8",
    // Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
    "python.linting.pydocstylePath": "pydocstyle",
    // Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
    "python.linting.mypyPath": "mypy",
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.prospectorArgs": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylintArgs": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pep8Args": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.flake8Args": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pydocstyleArgs": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.mypyArgs": [],
    // The output window name for the linting messages, defaults to Python output window.
    "python.linting.outputWindow": "Python",
    // Provider for formatting. Possible options include 'autopep8' and 'yapf'.
    "python.formatting.provider": "autopep8",
    // Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
    "python.formatting.autopep8Path": "autopep8",
    // Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
    "python.formatting.yapfPath": "yapf",
    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.autopep8Args": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.yapfArgs": [],
    // Format the document upon saving.
    "python.formatting.formatOnSave": false,
    // The output window name for the formatting messages, defaults to Python output window.
    "python.formatting.outputWindow": "Python",
    // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
    "python.autoComplete.extraPaths": [],
    // Automatically add brackets for functions.
    "python.autoComplete.addBrackets": false,
    // Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.
    "python.workspaceSymbols.tagFilePath": "${workspaceRoot}/tags",
    // Set to 'false' to disable Workspace Symbol provider using ctags.
    "python.workspaceSymbols.enabled": true,
    // Whether to re-build the tags file on start (deaults to true).
    "python.workspaceSymbols.rebuildOnStart": true,
    // Whether to re-build the tags file on when changes made to python files are saved.
    "python.workspaceSymbols.rebuildOnFileSave": true,
    // Fully qualilified path to the ctags executable (else leave as ctags, assuming it is in current path).
    "python.workspaceSymbols.ctagsPath": "ctags",
    // Pattern used to exclude files and folders from ctags (see http://ctags.sourceforge.net/ctags.html).
    "python.workspaceSymbols.exclusionPatterns": [],
    // Where to prompt to configure a test framework if potential tests directories are discovered.
    "python.unitTest.promptToConfigure": true,
    // Port number used for debugging of unittests.
    "python.unitTest.debugPort": 3000,
    // Whether to enable or disable unit testing using nosetests.
    "python.unitTest.nosetestsEnabled": false,
    // Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.
    "python.unitTest.nosetestPath": "nosetests",
    // Whether to enable or disable unit testing using pytest.
    "python.unitTest.pyTestEnabled": false,
    // Path to pytest (py.test), you can use a custom version of pytest by modifying this setting to include the full path.
    "python.unitTest.pyTestPath": "py.test",
    // Arguments passed in. Each argument is a separate item in the array.
    "python.unitTest.nosetestArgs": [],
    // Arguments passed in. Each argument is a separate item in the array.
    "python.unitTest.pyTestArgs": [],
    // Whether to enable or disable unit testing using unittest.
    "python.unitTest.unittestEnabled": false,
    // Arguments passed in. Each argument is a separate item in the array.
    "python.unitTest.unittestArgs": [
        "-v",
        "-s",
        ".",
        "-p",
        "*test*.py"
    ],
    // Patterns used to exclude files or folders from being linted.
    "python.linting.ignorePatterns": [
        ".vscode/*.py",
        "**/site-packages/**/*.py"
    ],
    // Whether to lint Python files using pylama.
    "python.linting.pylamaEnabled": false,
    // Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
    "python.linting.pylamaPath": "pylama",
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylamaArgs": [],
    // The output window name for the unit test messages, defaults to Python output window.
    "python.unitTest.outputWindow": "Python Test Log",
    // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
    "python.terminal.executeInFileDir": false,
    // Python launch arguments to use when executing a file in the terminal.
    "python.terminal.launchArgs": [],
    // Whether to appen the results to results window, else clear and display.
    "python.jupyter.appendResults": true,
    // Default kernel to be used. By default the first available kernel is used.
    "python.jupyter.defaultKernel": "",
    // Code executed when the kernel starts. Such as the default of '%matplotlib inline'. Individual lines can be placed in separate items of the array.
    "python.jupyter.startupCode": [
        "%matplotlib inline"
    ],
    // Informations to display in history as label
    "gitHistory.displayLabel": "${name} <${email}> on ${date}",
    // Informations to display in history as description
    "gitHistory.displayDescription": "${message}",
    // Number of seconds the list of `.gitignore` files retrieved from github will be cached
    "gitignore.cacheExpirationInterval": 3600
}
